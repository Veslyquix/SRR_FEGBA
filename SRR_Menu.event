
#define MaxRTextOpt 7 
#define SRRMenu(id) "{ addr: ; PUSH; ORG gSRRMenuText + (id * (MaxRTextOpt+1) * 4); POIN addr; POP }"
#define tag(id) "{ addr: ; PUSH; ORG tags + (id * 4); POIN addr; POP }"
#define SRRDesc(id) "{ addr: ; PUSH; ORG gSRRMenuText + (id * (MaxRTextOpt+1) * 4) + 4; POIN addr; POP }"
#define SRRDesc(id, opt) "{ addr: ; PUSH; ORG gSRRMenuText + (id * (MaxRTextOpt+1) * 4) + (4*(opt+1)); POIN addr; POP }"

ALIGN 4 
MaxRTextOptions:
WORD MaxRTextOpt 

#define NewlineChar "\"


blankString:
txt(" "); 

ALIGN 64 
gSRRMenuText: 
FILL((MaxRTextOpt+1) * 4 * 30) // max 30 options 

#define SeedOpt 0 
#define VarianceOpt 1 
#define CharactersOpt 2 
#define FromGameOpt 3 
#define BaseStatsOpt 4 
#define GrowthsOpt 5 
#define LevelupsOpt 6 
#define StatCapsOpt 7 
#define ClassOpt 8 
#define ItemOpt 9
#define ModeOpt 10 
#define MusicOpt 11 
#define ColoursOpt 12 
#define DurabilityOpt 13 
#define PlayerBonusOpt 14 
#define PlayerBonusGrowthOpt 15 
#define EnemyBonusOpt 16
#define EnemyBonusGrowthOpt 17 
#define FogOpt 18
#define SoftlockOpt 19 
#define SkipChOpt 20
#define ReloadUnitsOpt 21 
#define UiOpt 22
#define DebuggerOpt 23 
#define BGOpt 24
#define TimedHitsOpt 25 
#define SkillsOpt 26 


ALIGN 64 
tags: 
FILL(4 * 40) 


tag(0); txt("Unpromoted");
tag(1); txt("Promoted");
tag(2); txt("Male");
tag(3); txt("Female");
tag(4); txt("Unmounted");
tag(5); txt("Mounted");
tag(6); txt("--");
tag(7); txt("--");



tag(08); txt("Swords");
tag(09); txt("Lances");
tag(10); txt("Axes");
tag(11); txt("Bows");
tag(12); txt("Staves");
tag(13); txt("Anima");
tag(14); txt("Light");
tag(15); txt("Dark");

tag(16); txt("Lord");
tag(17); txt("Thief");
tag(18); txt("Dancer");
tag(19); txt("Manakete"); // tag(12); txt("Trainee");
tag(20); txt("--");
tag(21); txt("--");
tag(22); txt("--");
tag(23); txt("--");

tag(24); txt("Bulky");
tag(25); txt("Tanky");
tag(26); txt("Powerful");
tag(27); txt("Quick");
tag(28); txt("--");
tag(29); txt("--");
tag(30); txt("--");
tag(31); txt("--");
tag(32); txt("Filter Characters");





SRRMenu(SeedOpt);               txt("Seed")
SRRDesc(SeedOpt,0); txt("Random Numbers are generated\using this seed."); 
SRRMenu(VarianceOpt);           txt("Variance")
SRRDesc(VarianceOpt); txt("Diversity of gameplay.\Stats/Growths will vary +/-\this much."); 
SRRMenu(CharactersOpt);         txt("Characters")
SRRDesc(CharactersOpt); txt("Characters can be swapped\around for a unique experience."); 
SRRMenu(FromGameOpt);           txt("From Game")
SRRDesc(FromGameOpt); txt("Recruitable units can be from\specific or random FE games."); 
SRRMenu(BaseStatsOpt);          txt("Base Stats")
SRRDesc(BaseStatsOpt); txt("Determines units starting\stats on their initial appearance.\Stat +/- (Stat*Variance)."); 
SRRMenu(GrowthsOpt);            txt("Growths")
SRRDesc(GrowthsOpt,0); txt("Characters' original growth."); 
SRRDesc(GrowthsOpt,1); txt("Randomize characters' growths.\Original Growth +/- (Growth*Variance)."); 
SRRDesc(GrowthsOpt,2); txt("Always 0%. Good luck."); 
SRRDesc(GrowthsOpt,3); txt("100% growths, you cheater.\Stats always increase on levelup."); 
SRRDesc(GrowthsOpt,4); txt("50/50 odds - a coin flip."); 
SRRMenu(LevelupsOpt);           txt("Levelups")
SRRDesc(LevelupsOpt,0); txt("Levelups calls NextRN, which advances\by arrow wiggling or playing.\Easily abusable with savestates."); 
SRRDesc(LevelupsOpt,1); txt("Stats will increase based on\your seed. Consistent and\can't be abused with savestates."); 
SRRDesc(LevelupsOpt,2); txt("Stats will levelup based on\the average at that level.\No blessed/statscrewed levelups."); 
SRRMenu(StatCapsOpt);           txt("Stat Inflation/Caps") 
SRRDesc(StatCapsOpt,0); txt("Stats mostly cap between\20 and 30."); 
SRRDesc(StatCapsOpt,1); txt("Stats randomly cap between\0 and 30, but rarely\very low."); 
SRRDesc(StatCapsOpt,2); txt("Stats always cap at 0.\Good luck lol."); 
SRRDesc(StatCapsOpt,3); txt("Stats always cap at 15.\Stats/growths are a little lower."); 
SRRDesc(StatCapsOpt,4); txt("Stats always cap at 30.\Stats/growths are normal."); 
SRRDesc(StatCapsOpt,5); txt("Stats always cap at 45.\Stats/growths are a little higher."); 
SRRDesc(StatCapsOpt,6); txt("Stats always cap at 60.\Stats/growths are higher than normal."); 
SRRMenu(ClassOpt);              txt("Class") 
SRRDesc(ClassOpt,0); txt("Characters start in their\original class."); 
SRRDesc(ClassOpt,1); txt("Starting class is randomized\from the vanilla list."); 
SRRDesc(ClassOpt,2); txt("Starting class for players is\randomized from the vanilla list."); 
SRRDesc(ClassOpt,3); txt("Starting class for enemies is\randomized from the vanilla list."); 
SRRDesc(ClassOpt,4); txt("Starting class is randomized\and includes classes designed\by the hacking community."); 
SRRDesc(ClassOpt,5); txt("Starting class for players is\randomized and includes classes designed\by the hacking community."); 
SRRDesc(ClassOpt,6); txt("Starting class for enemies is\randomized and includes classes designed\by the hacking community."); 
SRRMenu(ItemOpt);               txt("Items")
SRRDesc(ItemOpt,0); txt("Weapon stats and items found\will not change."); 
SRRDesc(ItemOpt,1); txt("Weapon stats will vary and\items found will be random."); 
SRRDesc(ItemOpt,2); txt("Items found will be random.\Weapon stats won't change."); 
SRRDesc(ItemOpt,3); txt("Weapon stats will be random.\Items found won't change."); 
SRRMenu(ModeOpt);               txt("Mode")
SRRDesc(ModeOpt,0); txt("Units that reach 0 HP die\and cannot be used anymore."); 
SRRDesc(ModeOpt,1); txt("Units that reach 0 HP retreat\and can be used in the future."); 
SRRMenu(MusicOpt);              txt("Music")
SRRDesc(MusicOpt); txt("Ya wanna hear music from\everywhere or not?"); 
SRRMenu(ColoursOpt);            txt("Colours")
SRRDesc(ColoursOpt,0); txt("Colours are not changed."); 
SRRDesc(ColoursOpt,1); txt("Units' battle sprites and portraits\have random colours."); 
SRRDesc(ColoursOpt,2); txt("Portraits have random colours.\Battle sprites use unit palettes\leading to interesting or broken colours."); 
SRRDesc(ColoursOpt,3); txt("Portraits have random colours."); 
SRRMenu(DurabilityOpt);         txt("Item Uses")
SRRDesc(DurabilityOpt,0); txt("Items and weapons have\their standard number of uses."); 
SRRDesc(DurabilityOpt,1); txt("E rank weapons and\vulneraries never break."); 
SRRDesc(DurabilityOpt,2); txt("Consumable items have infinite uses!"); 
SRRDesc(DurabilityOpt,3); txt("You don't want items/weapons\to break? MAKE IT INFINITE!"); 
SRRMenu(PlayerBonusOpt);        txt("Player Bonus")
SRRDesc(PlayerBonusOpt); txt("Player starting stats will increase or\decrease as if they had this many\extra/fewer levels."); 
SRRMenu(PlayerBonusGrowthOpt);  txt("Player Growth Bonus")
SRRDesc(PlayerBonusGrowthOpt); txt("Increase or decrease all\player growths."); 
SRRMenu(EnemyBonusOpt);         txt("Enemy Diff. Bonus")
SRRDesc(EnemyBonusOpt); txt("Enemy starting stats will increase or\decrease as if they had this many\extra/fewer levels."); 
SRRMenu(EnemyBonusGrowthOpt);  txt("Enemy Growth Bonus")
SRRDesc(EnemyBonusGrowthOpt); txt("Increase or decrease all\enemy growths."); 
SRRMenu(FogOpt);                txt("Fog")
SRRDesc(FogOpt,0); txt("Fog of war is unchanged."); 
SRRDesc(FogOpt,1); txt("Gets rid of fog of war."); 
SRRDesc(FogOpt,2); txt("Embraces fog of war.\For. every. single. map.\You lunatic."); 
SRRMenu(SoftlockOpt);           txt("Override AI")
SRRDesc(SoftlockOpt); txt("AI is unchanged."); 
SRRDesc(SoftlockOpt,1); txt("Turn your playthrough into defense maps.\Mobile enemies always charge at you."); 
SRRDesc(SoftlockOpt,2); txt("Enemies will eventually start charging\at you to prevent softlocks in\rout chapters."); 
SRRMenu(SkipChOpt);             txt("Skip chapter")
SRRDesc(SkipChOpt); txt("Had enough of a chapter?\Use this to win the current chapter."); 
SRRMenu(ReloadUnitsOpt);        txt("Reload units")
SRRDesc(ReloadUnitsOpt, 0); txt("Units will not be reloaded.\This option exists to prevent accidental\overwriting of units."); 
SRRDesc(ReloadUnitsOpt, 1); txt("All units will be reloaded.\This option exists to prevent accidental\overwriting of units."); 
SRRDesc(ReloadUnitsOpt, 2); txt("Player units will be reloaded.\This option exists to prevent accidental\overwriting of units."); 
SRRDesc(ReloadUnitsOpt, 3); txt("Enemy units will be reloaded.\This option exists to prevent accidental\overwriting of units."); 
SRRMenu(UiOpt);                 txt("User Interface")
SRRDesc(UiOpt); txt("Changes the visual style of\various menus in the game."); 
SRRMenu(DebuggerOpt);           txt("Debugger")
SRRDesc(DebuggerOpt,0); txt("Pressing B on units does nothing."); 
SRRDesc(DebuggerOpt,1); txt("Pressing B on units opens the debugger,\'The tool for everything'."); 
SRRMenu(BGOpt);                 txt("Backgrounds")
SRRDesc(BGOpt,0); txt("Backgrounds in events are\unchanged."); 
SRRDesc(BGOpt,1); txt("This is like being in another\place, regardless of story."); 
SRRMenu(SkillsOpt);             txt("Skills")
SRRDesc(SkillsOpt); txt("Determines what skills units\will get to use."); 
SRRMenu(TimedHitsOpt);          txt("Timed Hits") 
SRRDesc(TimedHitsOpt,0); txt("Battles are normal."); 
SRRDesc(TimedHitsOpt,1); txt("Mario RPG moment.\Pressing A at the right time\improves your success in battles."); 
SRRDesc(TimedHitsOpt,2); SRRDesc(TimedHitsOpt,3); txt("Mario RPG moment.\Pressing buttons at the right time\improves your success in battles."); 

