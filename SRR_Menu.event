
#define MaxRTextOpt 7 
#define SRRMenu(id) "{ addr: ; PUSH; ORG gSRRMenuText + (id * (MaxRTextOpt+1) * 4); POIN addr; POP }"
#define tag(id) "{ addr: ; PUSH; ORG tags + (id * 4); POIN addr; POP }"
#define SRRDesc(id) "{ addr: ; PUSH; ORG gSRRMenuText + (id * (MaxRTextOpt+1) * 4) + 4; POIN addr; POP }"
#define SRRDesc(id, opt) "{ addr: ; PUSH; ORG gSRRMenuText + (id * (MaxRTextOpt+1) * 4) + (4*(opt+1)); POIN addr; POP }"

ALIGN 4 
MaxRTextOptions:
WORD MaxRTextOpt 

#define NewlineChar "\"


blankString:
txt(" "); 

RandomizerText: 
txt("Randomizer")


GameText: 
txt("From Game")
RerollText:
txt("Reroll Page")
SetAllText:
txt("Set All")
ResetPageText:
txt("Reset Page")
ConfirmText:
txt("Confirm")
PageText:
txt("Page")




#include "SRR_Menu_defs.enu.event" 

// #define SeedOption 0 
// #define VarianceOption 1 
// #define CharactersOption 2 
// #define FromGameOption 3 
// #define BaseStatsOption 4 
// #define GrowthsOption 5 
// #define LevelupsOption 6 
// #define StatCapsOption 7 
// #define ClassOption 8 
// #define ItemOption 9
// #define ModeOption 10 
// #define MusicOption 11 
// #define ColoursOption 12 
// #define DurabilityOption 13 
// #define PlayerBonusOption 14 
// #define PlayerBonusGrowthOption 15 
// #define EnemyBonusOption 16
// #define EnemyBonusGrowthOption 17 
// #define FogOption 18
// #define SoftlockOption 19 
// #define SkipChOption 20
// #define ReloadUnitsOption 21 
// #define UiOption 22
// #define DebuggerOption 23 
// #define BGOption 24
// #define TimedHitsOption 25 
// #define SkillsOption 26 




ALIGN 64 
gSRRMenuText: 
FILL((MaxRTextOpt+1) * 4 * 30) // max 30 options 


#define SRRHeader(id) "header: ; PUSH; ORG SRRText_POIN + (id * 4); POIN header; POP ;" 
ALIGN 4 
SRRText_POIN:
FILL(4 * 30) 


{
t0:  txt(" ");  
ALIGN 4; SRRHeader(SeedOpt)
POIN t0 0 
}


{
t0:  txt("0%");   t1:  txt("5%");   t2:  txt("10%");  t3:  txt("15%");  t4:  txt("20%");
t5:  txt("25%");  t6:  txt("30%");  t7:  txt("35%");  t8:  txt("40%");  t9:  txt("45%");
t10: txt("50%");  t11: txt("55%");  t12: txt("60%");  t13: txt("65%");  t14: txt("70%");
t15: txt("75%");  t16: txt("80%");  t17: txt("85%");  t18: txt("90%");  t19: txt("95%");
t20: txt("100%");
ALIGN 4; SRRHeader(VarianceOpt)
POIN t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 0 
}


{
t0:  txt("Vanilla");                     t1:  txt("Players reordered");           t2:  txt("Bosses reordered");
t3:  txt("Players & Bosses reordered");  t4:  txt("Players and Bosses swap");
t5:  txt("Random");
ALIGN 4; SRRHeader(CharactersOpt)
POIN t0 t1 t2 t3 t4 t5 0
}



{
t0:  txt("Vanilla");                      t1:  txt("FE1/3: Shadow Dragon");         t2:  txt("FE4: Genealogy/Holy War"); 
t3:  txt("FE5: Thracia 776");             
#ifdef _FE8_ 
t4:  txt("FE6: The Binding Blade");
t5:  txt("FE7: The Blazing Blade");  
#endif 
#ifdef _FE7_ 
t4:  txt("FE6: The Binding Blade");
t5:  txt("FE8: Sacred Stones");  
#endif 
#ifdef _FE6_ 
t4:  txt("FE7: The Blazing Blade");
t5:  txt("FE8: Sacred Stones");  
#endif 
t6:  txt("FE9/FE10: Radiant Dawn");       t7:  txt("FE13: Awakening"); 
t8:  txt("FE14: Fates");                  t9:  txt("FE2/15: Echoes");
t10: txt("FE16: Three Houses");           t11: txt("FE17: Engage");                 t12: txt("Random");
ALIGN 4; SRRHeader(FromGameOpt)
POIN t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 0
}

{
t0:  txt(" ");  
ALIGN 4; SRRHeader(FilterCharsOpt)
POIN t0 0
}

{
t0:  txt(" ");
ALIGN 4; SRRHeader(PreviewCharsOpt)
POIN t0 0
}


{
t0:  txt("Vanilla");  t1:  txt("Random");
ALIGN 4; SRRHeader(BaseStatsOpt)
POIN t0 t1 0
}

{
t0:  txt("Vanilla");  t1:  txt("Random");  t2:  txt("0%"); 
t3:  txt("100%");     t4:  txt("50%");
ALIGN 4; SRRHeader(GrowthsOpt)
POIN t0 t1 t2 t3 t4 0
}

{
t0:  txt("Vanilla");   t1:  txt("Based on seed");   t2:  txt("Fixed");
ALIGN 4; SRRHeader(LevelupsOpt)
POIN t0 t1 t2 0
}

{
t0:  txt("Vanilla");   t1:  txt("Random");   t2:  txt("0"); 
t3:  txt("15");        t4:  txt("30");        t5:  txt("45"); 
t6:  txt("60");
ALIGN 4; SRRHeader(StatCapsOpt)
POIN t0 t1 t2 t3 t4 t5 t6 0
}

{
t0:  txt("Vanilla");              t1:  txt("Random vanilla classes");       t2:  txt("Random for players");
t3:  txt("Random for enemies");   t4:  txt("Random with new classes");     t5:  txt("New rand player classes");
t6:  txt("New rand enemy classes");
ALIGN 4; SRRHeader(ClassOpt)
POIN t0 t1 t2 t3 t4 t5 t6 0
}


{
t0:  txt("Vanilla");               t1:  txt("Random");  
t2:  txt("Random found items only"); t3:  txt("Random item stats only");
ALIGN 4; SRRHeader(ItemOpt)
POIN t0 t1 t2 t3 0
}

{
t0:  txt("Classic");  t1:  txt("Casual");
ALIGN 4; SRRHeader(ModeOpt)
POIN t0 t1 0
}

{
t0:  txt("Vanilla BGM");  t1:  txt("Random BGM");
ALIGN 4; SRRHeader(MusicOpt)
POIN t0 t1 0
}

{
t0:  txt("Vanilla Colours");  t1:  txt("Random");  t2:  txt("Janky");  t3:  txt("Portraits only");
ALIGN 4; SRRHeader(ColoursOpt)
POIN t0 t1 t2 t3 0
}

{
t0:  txt("Vanilla");        t1:  txt("Infinite basics");  t2:  txt("Infinite weapons");  
t3:  txt("Infinite items");
ALIGN 4; SRRHeader(DurabilityOpt)
POIN t0 t1 t2 t3 0
}


{
t0:  txt("Vanilla");           t1:  txt("+1 hidden level");  t2:  txt("+2 hidden levels");  
t3:  txt("+3 hidden levels");  t4:  txt("+4 hidden levels"); t5:  txt("+5 hidden levels");  
t6:  txt("+6 hidden levels");  t7:  txt("+7 hidden levels"); t8:  txt("+8 hidden levels");  
t9:  txt("+9 hidden levels");  t10: txt("+10 hidden levels"); t11: txt("+11 hidden levels");  
t12: txt("+12 hidden levels"); t13: txt("+13 hidden levels"); t14: txt("+14 hidden levels");  
t15: txt("+15 hidden levels"); t16: txt("+16 hidden levels"); t17: txt("+17 hidden levels");  
t18: txt("+18 hidden levels"); t19: txt("+19 hidden levels"); t20: txt("+20 hidden levels");  
t21: txt("-10 hidden levels"); t22: txt("-9 hidden levels");  t23: txt("-8 hidden levels");  
t24: txt("-7 hidden levels");  t25: txt("-6 hidden levels");  t26: txt("-5 hidden levels");  
t27: txt("-4 hidden levels");  t28: txt("-3 hidden levels");  t29: txt("-2 hidden levels");  
t30: txt("-1 hidden level");

ALIGN 4; header: ; PUSH; ORG SRRText_POIN + (PlayerBonusOpt * 4); POIN header; POP ;
POIN t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26 t27 t28 t29 t30 0
PUSH; ORG SRRText_POIN + (EnemyBonusOpt * 4); POIN header; POP ;
POIN t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26 t27 t28 t29 t30 0
}

{
t0:  txt("Vanilla");   t1:  txt("+10%");  t2:  txt("+20%");  t3:  txt("+30%");  t4:  txt("+40%");  
t5:  txt("+50%");      t6:  txt("+60%");  t7:  txt("+70%");  t8:  txt("+80%");  t9:  txt("+90%");  
t10: txt("+100%");     t11: txt("-10%");   t12: txt("-20%");  t13: txt("-30%");  t14: txt("-40%");  
t15: txt("-50%");

ALIGN 4; header: ; PUSH; ORG SRRText_POIN + (PlayerBonusGrowthOpt * 4); POIN header; POP ;
POIN t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 0
PUSH; ORG SRRText_POIN + (EnemyBonusGrowthOpt * 4); POIN header; POP ;
POIN t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 0
}

{
t0:  txt("Vanilla");    t1:  txt("Always off");   t2:  txt("Always on");
ALIGN 4; SRRHeader(FogOpt)
POIN t0 t1 t2 0
}

{
t0:  txt("Vanilla");           t1:  txt("Charge towards you");    t2:  txt("Gradually charge");
ALIGN 4; SRRHeader(SoftlockOpt)
POIN t0 t1 t2 0
}

{
t0:  txt("Vanilla");    t1:  txt("Press A");
ALIGN 4; SRRHeader(SkipChOpt)
POIN t0 t1 0
}

{
t0:  txt("None");    t1:  txt("All");    t2:  txt("Players");  t3:  txt("Enemies");
ALIGN 4; SRRHeader(ReloadUnitsOpt)
POIN t0 t1 t2 t3 0
}

{
t0:  txt("Vanilla");             t1:  txt("Stephano / Sokaballa");    t2:  txt("Hypergammaspaces");  
t3:  txt("Pikmin / Fenreir");
ALIGN 4; SRRHeader(UiOpt)
POIN t0 t1 t2 t3 0
}

{
t0:  txt("Disabled");    t1:  txt("Press B on unit");
ALIGN 4; SRRHeader(DebuggerOpt)
POIN t0 t1 0
}

{
t0:  txt("Vanilla");    t1:  txt("Random");
ALIGN 4; SRRHeader(BGOpt)
POIN t0 t1 0
}

{
t0:  txt("Off");    t1:  txt("Easy");    t2:  txt("Normal");  t3:  txt("Hard");
ALIGN 4; SRRHeader(TimedHitsOpt)
POIN t0 t1 t2 t3 0
}

{
t0:  txt("Vanilla");   t1:  txt("Random");    t2:  txt("Fixed");    t3:  txt("Random &");
ALIGN 4; SRRHeader(SkillsOpt)
POIN t0 t1 t2 t3 0
}




ALIGN 64 
tags: 
FILL(4 * 40) 


tag(0); txt("Unpromoted");
tag(1); txt("Promoted");
tag(2); txt("Male");
tag(3); txt("Female");
tag(4); txt("--");
tag(5); txt("--");
tag(6); txt("--");
tag(7); txt("--");



tag(08); txt("Swords");
tag(09); txt("Lances");
tag(10); txt("Axes");
tag(11); txt("Bows");
tag(12); txt("Staves");
tag(13); txt("Anima");
tag(14); txt("Light");
tag(15); txt("Dark");

tag(16); txt("Lord");
tag(17); txt("Thief");
tag(18); txt("Dancer");
tag(19); txt("Manakete"); // tag(12); txt("Trainee");
tag(20); txt("Pegasi");
tag(21); txt("Wyvern");
tag(22); txt("Mount");
tag(23); txt("Armour");

tag(24); txt("--");
tag(25); txt("--");
tag(26); txt("--");
tag(27); txt("--");
// tag(24); txt("Bulky");
// tag(25); txt("Tanky");
// tag(26); txt("Powerful");
// tag(27); txt("Quick");
tag(28); txt("--");
tag(29); txt("--");
tag(30); txt("--");
tag(31); txt("--");
tag(32); txt("Filter Characters");


ALIGN 4 
FilterArmourClasses: 
BYTE Knight Knight_F General General_F 
BYTE 0 // Terminator 


SRRMenu(SeedOpt);               txt("Seed")
SRRDesc(SeedOpt,0); txt("Random Numbers are generated\using this seed."); 
SRRMenu(VarianceOpt);           txt("Variance")
SRRDesc(VarianceOpt); txt("Diversity of gameplay.\Stats/Growths will vary +/-\this much."); 
SRRMenu(CharactersOpt);         txt("Characters")
SRRDesc(CharactersOpt); txt("Characters can be swapped\around for a unique experience."); 
SRRMenu(FromGameOpt);           txt("From Game")
SRRDesc(FromGameOpt); txt("Recruitable units can be from\specific or random FE games."); 
SRRMenu(FilterCharsOpt);           txt("Filter Characters")
SRRDesc(FilterCharsOpt); txt("Only include characters with\specific weapon types or traits."); 
SRRMenu(PreviewCharsOpt);           txt("Preview Characters")
SRRDesc(PreviewCharsOpt); txt("Preview who your recruitable\characters will turn into."); 

SRRMenu(BaseStatsOpt);          txt("Base Stats")
SRRDesc(BaseStatsOpt); txt("Determines units starting\stats on their initial appearance.\Stat +/- (Stat*Variance)."); 
SRRMenu(GrowthsOpt);            txt("Growths")
SRRDesc(GrowthsOpt,0); txt("Characters' original growth."); 
SRRDesc(GrowthsOpt,1); txt("Randomize characters' growths.\Original Growth +/- (Growth*Variance)."); 
SRRDesc(GrowthsOpt,2); txt("Always 0%. Good luck."); 
SRRDesc(GrowthsOpt,3); txt("100% growths, you cheater.\Stats always increase on levelup."); 
SRRDesc(GrowthsOpt,4); txt("50/50 odds - a coin flip."); 
SRRMenu(LevelupsOpt);           txt("Levelups")
SRRDesc(LevelupsOpt,0); txt("Levelups calls NextRN, which advances\by arrow wiggling or playing.\Easily abusable with savestates."); 
SRRDesc(LevelupsOpt,1); txt("Stats will increase based on\your seed. Consistent and\can't be abused with savestates."); 
SRRDesc(LevelupsOpt,2); txt("Stats will levelup based on\the average at that level.\No blessed/statscrewed levelups."); 
SRRMenu(StatCapsOpt);           txt("Stat Inflation/Caps") 
SRRDesc(StatCapsOpt,0); txt("Stats mostly cap between\20 and 30."); 
SRRDesc(StatCapsOpt,1); txt("Stats randomly cap between\0 and 30, but rarely\very low."); 
SRRDesc(StatCapsOpt,2); txt("Stats always cap at 0.\Good luck lol."); 
SRRDesc(StatCapsOpt,3); txt("Stats always cap at 15.\Stats/growths are a little lower."); 
SRRDesc(StatCapsOpt,4); txt("Stats always cap at 30.\Stats/growths are normal."); 
SRRDesc(StatCapsOpt,5); txt("Stats always cap at 45.\Stats/growths are a little higher."); 
SRRDesc(StatCapsOpt,6); txt("Stats always cap at 60.\Stats/growths are higher than normal."); 
SRRMenu(ClassOpt);              txt("Class") 
SRRDesc(ClassOpt,0); txt("Characters start in their\original class."); 
SRRDesc(ClassOpt,1); txt("Starting class is randomized\from the vanilla list."); 
SRRDesc(ClassOpt,2); txt("Starting class for players is\randomized from the vanilla list."); 
SRRDesc(ClassOpt,3); txt("Starting class for enemies is\randomized from the vanilla list."); 
SRRDesc(ClassOpt,4); txt("Starting class is randomized\and includes classes designed\by the hacking community."); 
SRRDesc(ClassOpt,5); txt("Starting class for players is\randomized and includes classes designed\by the hacking community."); 
SRRDesc(ClassOpt,6); txt("Starting class for enemies is\randomized and includes classes designed\by the hacking community."); 
SRRMenu(ItemOpt);               txt("Items")
SRRDesc(ItemOpt,0); txt("Weapon stats and items found\will not change."); 
SRRDesc(ItemOpt,1); txt("Weapon stats will vary and\items found will be random."); 
SRRDesc(ItemOpt,2); txt("Items found will be random.\Weapon stats won't change."); 
SRRDesc(ItemOpt,3); txt("Weapon stats will be random.\Items found won't change."); 
SRRMenu(ModeOpt);               txt("Mode")
SRRDesc(ModeOpt,0); txt("Units that reach 0 HP die\and cannot be used anymore."); 
SRRDesc(ModeOpt,1); txt("Units that reach 0 HP retreat\and can be used in the future."); 
SRRMenu(MusicOpt);              txt("Music")
SRRDesc(MusicOpt); txt("Ya wanna hear music from\everywhere or not?"); 
SRRMenu(ColoursOpt);            txt("Colours")
SRRDesc(ColoursOpt,0); txt("Colours are not changed."); 
SRRDesc(ColoursOpt,1); txt("Units' battle sprites and portraits\have random colours."); 
SRRDesc(ColoursOpt,2); txt("Portraits have random colours.\Battle sprites use unit palettes\leading to interesting or broken colours."); 
SRRDesc(ColoursOpt,3); txt("Portraits have random colours."); 
SRRMenu(DurabilityOpt);         txt("Item Uses")
SRRDesc(DurabilityOpt,0); txt("Items and weapons have\their standard number of uses."); 
SRRDesc(DurabilityOpt,1); txt("E rank weapons and\vulneraries never break."); 
SRRDesc(DurabilityOpt,2); txt("Consumable items have infinite uses!"); 
SRRDesc(DurabilityOpt,3); txt("You don't want items/weapons\to break? MAKE IT INFINITE!"); 
SRRMenu(PlayerBonusOpt);        txt("Player Bonus")
SRRDesc(PlayerBonusOpt); txt("Player starting stats will increase or\decrease as if they had this many\extra/fewer levels."); 
SRRMenu(PlayerBonusGrowthOpt);  txt("Player Growth Bonus")
SRRDesc(PlayerBonusGrowthOpt); txt("Increase or decrease all\player growths."); 
SRRMenu(EnemyBonusOpt);         txt("Enemy Diff. Bonus")
SRRDesc(EnemyBonusOpt); txt("Enemy starting stats will increase or\decrease as if they had this many\extra/fewer levels."); 
SRRMenu(EnemyBonusGrowthOpt);  txt("Enemy Growth Bonus")
SRRDesc(EnemyBonusGrowthOpt); txt("Increase or decrease all\enemy growths."); 
SRRMenu(FogOpt);                txt("Fog")
SRRDesc(FogOpt,0); txt("Fog of war is unchanged."); 
SRRDesc(FogOpt,1); txt("Gets rid of fog of war."); 
SRRDesc(FogOpt,2); txt("Embraces fog of war.\For. every. single. map.\You lunatic."); 
SRRMenu(SoftlockOpt);           txt("Override AI")
SRRDesc(SoftlockOpt); txt("AI is unchanged."); 
SRRDesc(SoftlockOpt,1); txt("Turn your playthrough into defense maps.\Mobile enemies always charge at you."); 
SRRDesc(SoftlockOpt,2); txt("Enemies will eventually start charging\at you to prevent softlocks in\rout chapters."); 
SRRMenu(SkipChOpt);             txt("Skip chapter")
SRRDesc(SkipChOpt); txt("Had enough of a chapter?\Use this to win the current chapter."); 
SRRMenu(ReloadUnitsOpt);        txt("Reload units")
SRRDesc(ReloadUnitsOpt, 0); txt("Units will not be reloaded.\This option exists to prevent accidental\overwriting of units."); 
SRRDesc(ReloadUnitsOpt, 1); txt("All units will be reloaded.\This option exists to prevent accidental\overwriting of units."); 
SRRDesc(ReloadUnitsOpt, 2); txt("Player units will be reloaded.\This option exists to prevent accidental\overwriting of units."); 
SRRDesc(ReloadUnitsOpt, 3); txt("Enemy units will be reloaded.\This option exists to prevent accidental\overwriting of units."); 
SRRMenu(UiOpt);                 txt("User Interface")
SRRDesc(UiOpt); txt("Changes the visual style of\various menus in the game."); 
SRRMenu(DebuggerOpt);           txt("Debugger")
SRRDesc(DebuggerOpt,0); txt("Pressing B on units does nothing."); 
SRRDesc(DebuggerOpt,1); txt("Pressing B on units opens the debugger,\'The tool for everything'."); 
SRRMenu(BGOpt);                 txt("Backgrounds")
SRRDesc(BGOpt,0); txt("Backgrounds in events are\unchanged."); 
SRRDesc(BGOpt,1); txt("This is like being in another\place, regardless of story."); 
SRRMenu(SkillsOpt);             txt("Skills")
SRRDesc(SkillsOpt); txt("Determines what skills units\will get to use."); 
SRRMenu(TimedHitsOpt);          txt("Timed Hits") 
SRRDesc(TimedHitsOpt,0); txt("Battles are normal."); 
SRRDesc(TimedHitsOpt,1); txt("Mario RPG moment.\Pressing A at the right time\improves your success in battles."); 
SRRDesc(TimedHitsOpt,2); SRRDesc(TimedHitsOpt,3); txt("Mario RPG moment.\Pressing buttons at the right time\improves your success in battles."); 




ALIGN 4 
SeedOption:
WORD SeedOpt 
VarianceOption:
WORD VarianceOpt 
CharactersOption:
WORD CharactersOpt
FromGameOption:
WORD FromGameOpt
FilterCharsOption:
WORD FilterCharsOpt 
PreviewCharsOption: 
WORD PreviewCharsOpt 
BaseStatsOption:
WORD BaseStatsOpt
GrowthsOption:
WORD GrowthsOpt
LevelupsOption:
WORD LevelupsOpt
StatCapsOption:
WORD StatCapsOpt
ClassOption:
WORD ClassOpt
ItemOption:
WORD ItemOpt
ModeOption:
WORD ModeOpt
MusicOption:
WORD MusicOpt
ColoursOption:
WORD ColoursOpt
DurabilityOption:
WORD DurabilityOpt
PlayerBonusOption:
WORD PlayerBonusOpt
PlayerBonusGrowthOption:
WORD PlayerBonusGrowthOpt
EnemyBonusOption:
WORD EnemyBonusOpt
EnemyBonusGrowthOption:
WORD EnemyBonusGrowthOpt
FogOption:
WORD FogOpt
SoftlockOption:
WORD SoftlockOpt
SkipChOption:
WORD SkipChOpt
ReloadUnitsOption:
WORD ReloadUnitsOpt
UiOption:
WORD UiOpt
DebuggerOption:
WORD DebuggerOpt
BGOption:
WORD BGOpt
TimedHitsOption:
WORD TimedHitsOpt
SkillsOption:
WORD SkillsOpt





